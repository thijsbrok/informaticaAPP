{
  "_args": [
    [
      {
        "raw": "type@^2.0.0",
        "scope": null,
        "escapedName": "type",
        "name": "type",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "G:\\projects\\infnews\\node_modules\\ext"
    ]
  ],
  "_from": "type@^2.0.0",
  "_hasShrinkwrap": false,
  "_id": "type@2.1.0",
  "_location": "/ext/type",
  "_nodeVersion": "14.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/type_2.1.0_1598018282814_0.8913378346944241"
  },
  "_npmUser": {
    "name": "medikoo",
    "email": "medikoo+npm@medikoo.com"
  },
  "_npmVersion": "6.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "type@^2.0.0",
    "scope": null,
    "escapedName": "type",
    "name": "type",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ext"
  ],
  "_resolved": "https://registry.npmjs.org/type/-/type-2.1.0.tgz",
  "_shasum": "9bdc22c648cf8cf86dd23d32336a41cfb6475e3f",
  "_shrinkwrap": null,
  "_spec": "type@^2.0.0",
  "_where": "G:\\projects\\infnews\\node_modules\\ext",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "https://www.medikoo.com/"
  },
  "bugs": {
    "url": "https://github.com/medikoo/type/issues"
  },
  "dependencies": {},
  "description": "Runtime validation and processing of JavaScript types",
  "devDependencies": {
    "chai": "^4.2.0",
    "eslint": "^7.7.0",
    "eslint-config-medikoo": "^3.1.0",
    "git-list-updated": "^1.2.1",
    "husky": "^4.2.5",
    "lint-staged": "^10.2.11",
    "mocha": "^6.2.3",
    "nyc": "^15.1.0",
    "prettier-elastic": "^1.19.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-G9absDWvhAWCV2gmF1zKud3OyC61nZDwWvBL2DApaVFogI07CprggiQAOOjvp2NRjYWFzPyu7vwtDrQFq8jeSA==",
    "shasum": "9bdc22c648cf8cf86dd23d32336a41cfb6475e3f",
    "tarball": "https://registry.npmjs.org/type/-/type-2.1.0.tgz",
    "fileCount": 129,
    "unpackedSize": 129917,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfP9LrCRA9TVsSAnZWagAANpsP/2wLd3IrxT0504X9aBu9\nluTCZz5gro5w8OnlULbp1fjooPoPVcrrXcYY0nm3wbWre7a+/wVJNcq6R4Du\nMdUMfbdWXO3jKi9TNb7ACpd9z3YlCqTTghjtuhIohvv6UhRBMXzvcxh39ZrH\nk/8iHpVLsSjOZXoHtoYKy8TZzGbW7XKRr1UDOPm1u5075RIu/PPEmUHrriNH\njbIeDERlFD8NaKFmMXBTi6ojrLUf6HWCjSqMM7ugftuf98CdhKAE0nRi/L3z\ntdM+gPhyB3bSF/ingZRs00lQqoP8aMsqlq6bciPzFdML4/0nDSeBrIUT++rh\ncYV4W/6Mo2e3UhDlAsS9MSiD8p9yPEn01lrhVrx+vrLKPpNNtwRSZXGl31ky\n73EpA+GPVgQ0csAMHncSZ/azrus6s9yfq9FVrIXgEqsSKQLmN09ex1PMHKoZ\noSd+f/CB83e0S94DGwlZkn1rSbsr5hKlNE2P30EGH1FC3V7r5BEuUy4oNALp\n2Na1lDGg+22KF+xJC+DCn5wR7nDjPsPVwcYmtSp6beRHsz426m9DBEC2okd/\nEDscYI87uQYsuaxhQrR6gVAZWbuEdWijWMiLCn6sVom7kJ8QTa1QD9dJ0/Yz\nhP8n6fcNd7orRUXbGBTxv0iGyl3UTsiplGPdnuj85wOTBVvydbSHaxXzCB1M\n+x59\r\n=f13+\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "medikoo/es3",
    "root": true,
    "globals": {
      "Map": true,
      "Promise": true,
      "Set": true,
      "Symbol": true
    },
    "overrides": [
      {
        "files": "test/**/*.js",
        "env": {
          "mocha": true
        },
        "rules": {
          "no-eval": "off",
          "no-new-wrappers": "off"
        }
      },
      {
        "files": [
          "string/coerce.js",
          "number/coerce.js"
        ],
        "rules": {
          "no-implicit-coercion": "off"
        }
      },
      {
        "files": "plain-object/is.js",
        "rules": {
          "no-proto": "off"
        }
      }
    ]
  },
  "gitHead": "407355288f088e92be2bdff366f4c6efb0dd27cd",
  "homepage": "https://github.com/medikoo/type#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "type",
    "coercion"
  ],
  "license": "ISC",
  "lint-staged": {
    "*.js": [
      "eslint"
    ],
    "*.{css,html,js,json,md,yaml,yml}": [
      "prettier -c"
    ]
  },
  "maintainers": [
    {
      "name": "gozala",
      "email": "rfobic@gmail.com"
    }
  ],
  "name": "type",
  "optionalDependencies": {},
  "prettier": {
    "printWidth": 100,
    "tabWidth": 4,
    "overrides": [
      {
        "files": [
          "*.md"
        ],
        "options": {
          "tabWidth": 2
        }
      }
    ]
  },
  "readme": "[![*nix build status][nix-build-image]][nix-build-url]\n[![Windows build status][win-build-image]][win-build-url]\n[![Tests coverage][cov-image]][cov-url]\n[![npm version][npm-image]][npm-url]\n\n# type\n\n## Runtime validation and processing of JavaScript types\n\n- Respects language nature and acknowledges its quirks\n- Allows coercion in restricted forms (rejects clearly invalid input, normalizes permissible type deviations)\n- No transpilation implied, written to work in all ECMAScript 3+ engines\n\n## Use case\n\nValidate arguments input in public API endpoints.\n\n_For validation of more sophisticated input structures (as deeply nested configuration objects) it's recommended to consider more powerful schema based utlities (as [AJV](https://ajv.js.org/) or [@hapi/joi](https://hapi.dev/family/joi/))_\n\n### Example usage\n\nBulletproof input arguments normalization and validation:\n\n```javascript\nconst ensureString        = require('type/string/ensure')\n    , ensureDate          = require('type/date/ensure')\n    , ensureNaturalNumber = require('type/natural-number/ensure')\n    , isObject            = require('type/object/is');\n\nmodule.exports = (path, options = { min: 0 }) {\n  path = ensureString(path, { errorMessage: \"%v is not a path\" });\n  if (!isObject(options)) options = {};\n  const min = ensureNaturalNumber(options.min, { default: 0 })\n      , max = ensureNaturalNumber(options.max, { isOptional: true })\n      , startTime = ensureDate(options.startTime, { isOptional: true });\n\n  // ...logic\n};\n```\n\n### Installation\n\n```bash\nnpm install type\n```\n\n## Utilities\n\nAside of general [`ensure`](docs/ensure.md) validation util, following kind of utilities for recognized JavaScript types are provided:\n\n##### `*/coerce`\n\nRestricted coercion into primitive type. Returns coerced value or `null` if value is not coercible per rules.\n\n##### `*/is`\n\nObject type/kind confirmation, returns either `true` or `false`.\n\n##### `*/ensure`\n\nValue validation. Returns input value (in primitive cases possibly coerced) or if value doesn't meet the constraints throws `TypeError` .\n\nEach `*/ensure` utility, accepts following options (eventually passed with second argument):\n\n- `isOptional` - Makes `null` or `undefined` accepted as valid value. In such case instead of `TypeError` being thrown, `null` is returned.\n- `default` - A value to be returned if `null` or `undefined` is passed as an input value.\n- `errorMessage` - Custom error message. Following placeholders can be used:\n  - `%v` - To be replaced with short string representation of invalid value\n  - `%n` - To be replaced with meaninfgul name (to be passed with `name` option) of validated value. Not effective if `name` option is not present\n- `name` - Meaningful name for validated value, to be used in error message, assuming it contains `%n` placeholder\n\n### Index\n\n#### General utils:\n\n- [`ensure`](docs/ensure.md)\n\n#### Type specific utils:\n\n- **Value**\n  - [`value/is`](docs/value.md#valueis)\n  - [`value/ensure`](docs/value.md#valueensure)\n- **Object**\n  - [`object/is`](docs/object.md#objectis)\n  - [`object/ensure`](docs/object.md#objectensure)\n  - **Plain Object**\n    - [`plain-object/is`](docs/plain-object.md#plain-objectis)\n    - [`plain-object/ensure`](docs/plain-object.md#plain-objectensure)\n- **String**\n  - [`string/coerce`](docs/string.md#stringcoerce)\n  - [`string/ensure`](docs/string.md#stringensure)\n- **Number**\n  - [`number/coerce`](docs/number.md#numbercoerce)\n  - [`number/ensure`](docs/number.md#numberensure)\n  - **Finite Number**\n    - [`finite/coerce`](docs/finite.md#finitecoerce)\n    - [`finite/ensure`](docs/finite.md#finiteensure)\n  - **Integer Number**\n    - [`integer/coerce`](docs/integer.md#integercoerce)\n    - [`integer/ensure`](docs/integer.md#integerensure)\n  - **Safe Integer Number**\n    - [`safe-integer/coerce`](docs/safe-integer.md#safe-integercoerce)\n    - [`safe-integer/ensure`](docs/.md#safe-integerensure)\n  - **Natural Number**\n    - [`natural-number/coerce`](docs/natural-number.md#natural-numbercoerce)\n    - [`natural-number/ensure`](docs/natural-number.md#natural-numberensure)\n  - **Array Length**\n    - [`array-length/coerce`](docs/array-length.md#array-lengthcoerce)\n    - [`array-length/ensure`](docs/array-length.md#array-lengthensure)\n  - **Time Value**\n    - [`time-value/coerce`](docs/time-value.md#time-valuecoerce)\n    - [`time-value/ensure`](docs/time-value.md#time-valueensure)\n- **Array Like**\n  - [`array-like/is`](docs/array-like.md#array-likeis)\n  - [`array-like/ensure`](docs/array-like.md#array-likeensure)\n  - **Array**\n    - [`array/is`](docs/array.md#arrayis)\n    - [`array/ensure`](docs/array.md#arrayensure)\n- **Iterable**\n  - [`iterable/is`](docs/iterable.md#iterableis)\n  - [`iterable/ensure`](docs/iterable.md#iterableensure)\n- **Date**\n  - [`date/is`](docs/date.md#dateis)\n  - [`date/ensure`](docs/date.md#dateensure)\n- **Function**\n  - [`function/is`](docs/function.md#functionis)\n  - [`function/ensure`](docs/function.md#functionensure)\n  - **Plain Function**\n    - [`plain-function/is`](docs/plain-function.md#plain-functionis)\n    - [`plain-function/ensure`](docs/plain-function.md#plain-functionensure)\n- **Reg Exp**\n  - [`reg-exp/is`](docs/reg-exp.md#reg-expis)\n  - [`reg-exp/ensure`](docs/.md#reg-expensure)\n- **Thenable**\n  - [`thenable/is`](docs/thenable.md#thenableis)\n  - [`thenable/ensure`](docs/thenable.md#thenableensure)\n  - **Promise**\n    - [`promise/is`](docs/promise.md#promiseis)\n    - [`promise/ensure`](docs/promise.md#promiseensure)\n- **Error**\n  - [`error/is`](docs/error.md#erroris)\n  - [`error/ensure`](docs/error.md#errorensure)\n- **Prototype**\n  - [`prototype/is`](docs/prototype.md#prototypeis)\n\n### Tests\n\n    $ npm test\n\n[nix-build-image]: https://semaphoreci.com/api/v1/medikoo-org/type/branches/master/shields_badge.svg\n[nix-build-url]: https://semaphoreci.com/medikoo-org/type\n[win-build-image]: https://ci.appveyor.com/api/projects/status/8nrtluuwsb5k9l8d?svg=true\n[win-build-url]: https://ci.appveyor.com/api/project/medikoo/type\n[cov-image]: https://img.shields.io/codecov/c/github/medikoo/type.svg\n[cov-url]: https://codecov.io/gh/medikoo/type\n[npm-image]: https://img.shields.io/npm/v/type.svg\n[npm-url]: https://www.npmjs.com/package/type\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/medikoo/type.git"
  },
  "scripts": {
    "check-coverage": "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
    "coverage": "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
    "lint": "eslint --ignore-path=.gitignore .",
    "lint-updated": "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
    "prettier-check-updated": "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
    "prettify": "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
    "test": "mocha --recursive"
  },
  "version": "2.1.0"
}
